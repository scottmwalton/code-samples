@page "/widgets"
@inject HttpClient Http
@inject ISessionStorageService SessionService

<h3>Widgets</h3>
<TelerikGrid Data="@widgets"
             @ref="Grid"
             PageSize="5"
             Pageable="true"
             Sortable="true"
             OnStateInit="@((GridStateEventArgs<Widget> args) => OnStateInit(args))"
             OnStateChanged="@((GridStateEventArgs<Widget> args) => OnStateChanged(args))"
             FilterMode="GridFilterMode.FilterMenu">
    <GridColumns>
        <GridColumn Field="@nameof(Widget.Name)" Title="Name" />
        <GridColumn Field="@nameof(Widget.Price)" Title="Price">
            <Template>
                @(String.Format("{0:C2}", (context as Widget).Price))
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(Widget.LastOrdered)" Title="Last Ordered" />
        <GridColumn Field="@nameof(Widget.Description)" Title="Description">
            <Template>
                @((context as Widget).Description.Substring(0, 100))
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>


@code {
    private List<Widget> widgets;
    private TelerikGrid<Widget> Grid { get; set; }
    private string stateStorageKey = "WidgetGridState";

    protected async override Task OnInitializedAsync()
    {
        widgets = await Http.GetFromJsonAsync<List<Widget>>("/api/Widget/GetWidgets");
    }

    private async Task OnStateInit(GridStateEventArgs<Widget> args)
    {
        try
        {
            var state = await SessionService.GetItemAsync<GridState<Widget>>(stateStorageKey);
            if (state != null)
            {
                args.GridState = state;
            }
        }
        catch (InvalidOperationException)
        {
            // the JS Interop for the local storage cannot be used during pre-rendering
        }
    }

    private async Task OnStateChanged(GridStateEventArgs<Widget> args)
    {
        await SaveState();
    }

    async Task SaveState()
    {
        var gridState = Grid.GetState();
        await SessionService.SetItemAsync(stateStorageKey, gridState);
    }
}